ext {

    kotlin_stdlib_common = dependencies.create("org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version")
    kotlin_stdlib_jvm = dependencies.create("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")
    kotlin_reflect = dependencies.create("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    // android x
    appcompat = dependencies.create("androidx.appcompat:appcompat:$appcompat_version")
    coreCtx = dependencies.create("androidx.core:core-ktx:$core_ktx_version")
    constraintlayout = dependencies.create("androidx.constraintlayout:constraintlayout:$constraintlayout_version")
    multidex = dependencies.create("androidx.multidex:multidex:$multidex_version")
    lifecycle = dependencies.create("androidx.lifecycle:lifecycle-extensions:$lifecycle_version")

    // glide
    glide = dependencies.create("com.github.bumptech.glide:glide:$glide_version")
    glideCompiler = dependencies.create("com.github.bumptech.glide:compiler:$glide_version")

    // kodein
    kodein = dependencies.create("org.kodein.di:kodein-di-erased:$kodein_version")
    kodeinJvm = dependencies.create("org.kodein.di:kodein-di-generic-jvm:$kodein_version")
    kodeinAndroid = dependencies.create("org.kodein.di:kodein-di-framework-android-x:$kodein_version")

    // kotlinx serialization
    kotlinx_serialization = dependencies.create("org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$kotlin_serialization_version") {
        apply plugin: 'kotlinx-serialization'
    }

    kotlinx_serialization_jvm = dependencies.create("org.jetbrains.kotlinx:kotlinx-serialization-runtime:$kotlin_serialization_version") {
        apply plugin: 'kotlinx-serialization'
    }

    kotlinx_serialization_native = dependencies.create("org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$kotlin_serialization_version") {
        apply plugin: 'kotlinx-serialization'
    }

    // sqldelight
    sqldelight_android_driver = dependencies.create("com.squareup.sqldelight:android-driver:$sqldelight_version")
    sqldelight_native_driver = dependencies.create("com.squareup.sqldelight:native-driver:$sqldelight_version")

    // okhttp
    okhttp = dependencies.create("com.squareup.okhttp3:okhttp:$okhttp_version")

    // test
    mockk = dependencies.create("io.mockk:mockk-common:$mockk_version")
    mockk_jvm = dependencies.create("io.mockk:mockk:$mockk_version") {
        exclude group: 'org.slf4j'
    }

    test_common = [
            dependencies.create("org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"),
            dependencies.create("org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"),
            mockk_jvm
    ]

    jvm_test_array = [
            dependencies.create("org.junit.jupiter:junit-jupiter-api:$junit_version"),
            dependencies.create("org.junit.jupiter:junit-jupiter-params:$junit_version"),
            dependencies.create("org.junit.jupiter:junit-jupiter-engine:$junit_version"),
            mockk_jvm
    ]
}