apply plugin: 'kotlin-multiplatform'

def getClosureByNameOrEmpty(String name) {
    if (project.properties.containsKey(name)) {
        return project.properties.find { it.key == name }.value
    } else {
        return {}
    }
}

kotlin {
    targets {
        //jvm()

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")       \
                                    ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'iOS')
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin_stdlib_common
                implementation kotlinx_serialization
            }
        }

        commonTest {
            dependencies {
                implementation kotlin_stdlib_common
                implementation kotlinx_serialization
            }
        }

        iOSMain {
            dependsOn commonMain
            dependencies {
                implementation kotlinx_serialization_native
            }
        }

//        jvmMain {
//            dependsOn commonMain
//            dependencies {
//                implementation kotlinx_serialization_jvm
//                implementation kotlin_reflect
//            }
//        }
//
//        jvmTest {
//            dependsOn commonTest
//            dependencies {
//                jvm_test_array.each {
//                    implementation it
//                }
//            }
//            project.jvmTest {
//                useJUnitPlatform()
//            }
//        }

        all {
            it.dependencies(getClosureByNameOrEmpty("${it.name}_dependencies"))
        }
    }
}

//afterEvaluate {
//    if (!project.hasProperty('test')) {
//        task test()
//    }
//    tasks.test.dependsOn jvmTest
//}